from transformers import pipeline
import gradio as gr

# Cargar los modelos de traducci√≥n
model_es_en = pipeline("translation", model="Helsinki-NLP/opus-mt-es-en")
model_en_es = pipeline("translation", model="Helsinki-NLP/opus-mt-en-es")

# Funci√≥n de traducci√≥n
def translate_text(text, direction):
    if not text:
        return ""
    
    if direction == "Espanyol ‚Üí Angles":
        result = model_es_en(text)
    elif direction == "Angles ‚Üí Espanyol":
        result = model_en_es(text)
    
    return result[0]['translation_text']

# Funci√≥n de autenticaci√≥n
def login(user, password):
    if user == 'iabd' and password == 'iabd':
        return True  # Autenticaci√≥n exitosa
    return False  # Autenticaci√≥n fallida

# Crear la aplicaci√≥n con Gradio
with gr.Blocks(title="Traductor") as demo:
    autenticat = gr.State(False)  # Estado para almacenar si el usuario est√° autenticado

    gr.Markdown("# üåç Traductor Espanyol ‚Üî Angles")

    # Secci√≥n de Login
    with gr.Row() as login_ui:
        user_input = gr.Textbox(label="User")
        password_input = gr.Textbox(label="Contrasenya", type="password")
        login_btn = gr.Button("Login")
        error_message = gr.Markdown("", visible=False)  # Mensaje de error oculto al inicio

    # Secci√≥n del Traductor (Oculta al inicio)
    with gr.Column(visible=False) as traductor_ui:
        direction = gr.Dropdown(
            choices=["Espanyol ‚Üí Angles", "Angles ‚Üí Espanyol"],
            label="Idiomas a traduir",
            value="Espanyol ‚Üí Angles"
        )
        input_text = gr.Textbox(label="Texte a traduir")
        output_text = gr.Textbox(label="Traducci√≥", interactive=False)
        translate_btn = gr.Button("Traduir")

    # Funci√≥n que maneja el login
    def handle_login(user, password):
        is_authenticated = login(user, password)  # Verificar credenciales
        
        if is_authenticated:
            return (
                True,  # Actualiza el estado autenticat
                gr.update(visible=False),  # Ocultar la UI de login
                gr.update(visible=True),  # Mostrar la UI del traductor
                gr.update(value="", visible=False)  # Ocultar mensaje de error
            )
        else:
            return (
                False,
                gr.update(visible=True),  # Mantener visible la UI de login
                gr.update(visible=False),  # Mantener oculta la UI del traductor
                gr.update(value="‚ùå Usuario o contrase√±a incorrectos", visible=True)  # Mostrar mensaje de error
            )

    # Conectar el bot√≥n de login con la funci√≥n handle_login
    login_btn.click(
        handle_login,
        inputs=[user_input, password_input],
        outputs=[autenticat, login_ui, traductor_ui, error_message]
    )

    # Conectar el bot√≥n de traducir con la funci√≥n de traducci√≥n
    translate_btn.click(translate_text, inputs=[input_text, direction], outputs=output_text)

if __name__ == "__main__":
    demo.launch()
